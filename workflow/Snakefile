import os
import sys
import math
from snakemake.utils import min_version

min_version("6.0")

SDIR = os.path.realpath(os.path.dirname(srcdir("Snakefile")))
shell.prefix(f"set -eo pipefail; ")


configfile: "config/config.yaml"


config["temp"] = config.get("temp", "temp")
config["tech"] = config.get("tech", "nanopore-raw")
config["threads"] = config.get("threads", 40)
config["genomeSize"] = config.get("genomeSize", "3g")
config["github"] = config.get("github", "")
print(config)


rule collect_reads:
    input:
        reads=lambda wc: config[wc.hap],
    output:
        fasta="{temp}/{pre}.{hap}.fasta",
    conda:
        "envs/env.yaml"
    threads: 8
    shell:
        """
        if [[ {input.reads} =~ .*\.(fofn) ]]; then
                cat $(cat {input.reads}) | seqtk seq -l 80 -A > {output.fasta}
        elif [[ {input.reads} =~ .*\.(fa|fq|fasta|fastq|gz) ]]; then
                cat {input.reads} | seqtk seq -l 80 -A > {output.fasta}
        elif [[ {input.reads} =~ .*\.(bam|sam|cram) ]]; then
                samtools fasta -@ {threads} -o {output.fasta} {input.reads}
        fi
        """


rule run_trio_binning:
    input:
        fasta=expand(
            rules.collect_reads.output.fasta,
            temp=config["temp"],
            hap="reads",
            pre=config["prefix"],
        ),
        mat=expand(
            rules.collect_reads.output.fasta,
            temp=config["temp"],
            hap="pat",
            pre=config["prefix"],
        ),
        pat=expand(
            rules.collect_reads.output.fasta,
            temp=config["temp"],
            hap="mat",
            pre=config["prefix"],
        ),
    output:
        mat=expand(
            "{temp}/{pre}/haplotype/haplotype-mat.fasta.gz",
            temp=config["temp"],
            pre=config["prefix"],
        ),
        pat=expand(
            "{temp}/{pre}/haplotype/haplotype-pat.fasta.gz",
            temp=config["temp"],
            pre=config["prefix"],
        ),
        unk=expand(
            "{temp}/{pre}/haplotype/haplotype-unknown.fasta.gz",
            temp=config["temp"],
            pre=config["prefix"],
        ),
        trio=temp(directory(config["temp"] + "/" + config["prefix"])),
    params:
        tech=config["tech"],
        tmp=config["temp"],
        genomeSize=config["genomeSize"],
        github_opt=config["github"],
    conda:
        "envs/env.yaml"
    threads: config["threads"]
    shell:
        """
        which canu
        canu --version
        canu -haplotype \
            {params.github_opt} \
            maxThreads={threads} \
            useGrid=false \
            -p asm -d {output.trio} \
            -genomeSize={params.genomeSize} \
            -haplotypemat {input.mat} \
            -haplotypepat {input.pat} \
            -{params.tech} {input.fasta}
        """


rule move_reads:
    input:
        mat=rules.run_trio_binning.output.mat,
        pat=rules.run_trio_binning.output.pat,
        unk=rules.run_trio_binning.output.unk,
        trio=rules.run_trio_binning.output.trio,
    output:
        mat="results/{pre}/mat.fa.gz",
        pat="results/{pre}/pat.fa.gz",
        unk="results/{pre}/unk.fa.gz",
    conda:
        "envs/env.yaml"
    shell:
        """
        cp {input.mat} {output.mat}
        cp {input.pat} {output.pat}
        cp {input.unk} {output.unk}
        """


rule read_stats:
    input:
        mat=rules.run_trio_binning.output.mat,
        pat=rules.run_trio_binning.output.pat,
        unk=rules.run_trio_binning.output.unk,
    output:
        tbl="results/{pre}/phasing.stats.tbl",
    conda:
        "envs/env.yaml"
    threads: 1
    shell:
        "{SDIR}/scripts/phasing_by_lengths.py {input} > {output}"


rule all:
    input:
        expand(rules.move_reads.output, pre=config["prefix"]),
        expand(rules.read_stats.output, pre=config["prefix"]),
        expand(rules.run_trio_binning.output.trio, pre=config["prefix"]),
